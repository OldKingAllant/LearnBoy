#pragma once

#include "../common/Common.h"
#include "../memory/Memory.h"
#include "CpuContext.h"

namespace GameboyEmu::State {
	class EmulatorState;
}

namespace GameboyEmu::Mem {
	class Memory;
}

//byte(*)(CpuContext&, Memory*);

//Pointer to function (to instruction)
#define INSTRUCTION_PTR(code) &instruction_##code

/*
* Definition and implementation
* of an instruction
*/
#define INSTRUCTION(code, body) byte instruction_##code(GameboyEmu::CPU::CpuContext& ctx, GameboyEmu::Mem::Memory* mem, GameboyEmu::State::EmulatorState* state) body
#define DEFINE_INSTR(code) byte instruction_##code(GameboyEmu::CPU::CpuContext& ctx, GameboyEmu::Mem::Memory* mem, GameboyEmu::State::EmulatorState* state);

//NOP
DEFINE_INSTR(00)

//JMP a16
DEFINE_INSTR(C3)

//XOR A
DEFINE_INSTR(AF)

//LD HL, d16
DEFINE_INSTR(21)

//DI
DEFINE_INSTR(F3)

//LD SP, d16
DEFINE_INSTR(31)

//LD (a16), A
DEFINE_INSTR(EA)

//LD A, D8
DEFINE_INSTR(3E)

//LDH (a8), A
DEFINE_INSTR(E0)

//CALL (a16)
DEFINE_INSTR(CD)

//LD A, L
DEFINE_INSTR(7D)

//LD A, H
DEFINE_INSTR(7C)

//JR r8
DEFINE_INSTR(18)

//RET
DEFINE_INSTR(C9)

//PUSH HL
DEFINE_INSTR(E5)

//POP HL
DEFINE_INSTR(E1)

//PUSH AF
DEFINE_INSTR(F5)

//INC HL
DEFINE_INSTR(23)

//LD A, (HL+)
DEFINE_INSTR(2A)

//POP AF
DEFINE_INSTR(F1)

//PUSH BC
DEFINE_INSTR(C5)

//LD BC, d16
DEFINE_INSTR(01)

//INC BC
DEFINE_INSTR(03)

//LD A, B
DEFINE_INSTR(78)

//OR C
DEFINE_INSTR(B1)

//JR Z, r8
DEFINE_INSTR(28)

//LDH A, (a8)
DEFINE_INSTR(F0)

//CP d8
DEFINE_INSTR(FE)

//JR NZ, r8
DEFINE_INSTR(20)

//POP BC
DEFINE_INSTR(C1)

//LD (HL-), A
DEFINE_INSTR(32)

//CB
DEFINE_INSTR(CB)

//LD C, d8
DEFINE_INSTR(0E)

//LDH (C), A
DEFINE_INSTR(E2)

//INC C
DEFINE_INSTR(0C)

//LD (HL), A
DEFINE_INSTR(77)

//LD DE, d16
DEFINE_INSTR(11)

//LD A, (DE)
DEFINE_INSTR(1A)

//INC DE
DEFINE_INSTR(13)

//LD A, E
DEFINE_INSTR(7B)

//LD C, A
DEFINE_INSTR(4F)

//LD B, d8
DEFINE_INSTR(06)

//RLA
DEFINE_INSTR(17)

//DEC B
DEFINE_INSTR(05)

//LD (HL+), A
DEFINE_INSTR(22)

//DEC A
DEFINE_INSTR(3D)

//DEC C
DEFINE_INSTR(0D)

//LD L, d8
DEFINE_INSTR(2E)

//LD H, A
DEFINE_INSTR(67)

//LD D, A
DEFINE_INSTR(57)

//INC B
DEFINE_INSTR(04)

//LD E, d8
DEFINE_INSTR(1E)

//DEC E
DEFINE_INSTR(1D)

//INC H
DEFINE_INSTR(24)

//SUB B
DEFINE_INSTR(90)

//DEC D
DEFINE_INSTR(15)

//LD D, d8
DEFINE_INSTR(16)

//CP (HL)
DEFINE_INSTR(BE)

//ADD (HL)
DEFINE_INSTR(86)

//LD A, (a16)
DEFINE_INSTR(FA)

//AND d8
DEFINE_INSTR(E6)

//CALL NZ, 16
DEFINE_INSTR(C4)

//INC L
DEFINE_INSTR(2C)

//XOR C
DEFINE_INSTR(A9)

//ADD A, d8
DEFINE_INSTR(C6)

//SUB d8
DEFINE_INSTR(D6)

//OR A
DEFINE_INSTR(B7)

//PUSH DE
DEFINE_INSTR(D5)

//DEC L
DEFINE_INSTR(2D)

//XOR (HL)
DEFINE_INSTR(AE)

//LD B, (HL)
DEFINE_INSTR(46)

//LD C, (HL)
DEFINE_INSTR(4E)

//LD D, (HL)
DEFINE_INSTR(56)

//LD H, d8
DEFINE_INSTR(26)

//RRA
DEFINE_INSTR(1F)

//JR NC, d8
DEFINE_INSTR(30)

//DEC H
DEFINE_INSTR(25)

//LD E, A
DEFINE_INSTR(5F)

//XOR d8
DEFINE_INSTR(EE)

//LD B, A
DEFINE_INSTR(47)

//LD A, C
DEFINE_INSTR(79)

//LD A, D
DEFINE_INSTR(7A)

//LD (HL), D
DEFINE_INSTR(72)

//LD (HL), C
DEFINE_INSTR(71)

//LD (HL), B
DEFINE_INSTR(70)

//POP DE
DEFINE_INSTR(D1)

//ADC A, d8
DEFINE_INSTR(CE)

//RET NC
DEFINE_INSTR(D0)

//RET NZ
DEFINE_INSTR(C0)

//RET Z
DEFINE_INSTR(C8)

//RET C
DEFINE_INSTR(D8)

//OR (HL)
DEFINE_INSTR(B6)

//DEC (HL)
DEFINE_INSTR(35)

//LD L, (HL)
DEFINE_INSTR(6E)

//LD L, A
DEFINE_INSTR(6F)

//ADD HL, HL
DEFINE_INSTR(29)

//JP (HL)
DEFINE_INSTR(E9)

//INC A
DEFINE_INSTR(3C)

//OR d8
DEFINE_INSTR(F6)

//JMP NZ, a16
DEFINE_INSTR(C2)

//SUB C
DEFINE_INSTR(91)

//ADD A, C
DEFINE_INSTR(81)

//LD HL, SP + r8
DEFINE_INSTR(F8)

//LD H, D
DEFINE_INSTR(62)

//LD L, E
DEFINE_INSTR(6B)

//LD (DE), A
DEFINE_INSTR(12)

//INC E
DEFINE_INSTR(1C)

//INC D
DEFINE_INSTR(14)

//CP E
DEFINE_INSTR(BB)

//LD A, (HL)
DEFINE_INSTR(7E)

//JR C, r8
DEFINE_INSTR(38)

//LD SP, HL
DEFINE_INSTR(F9)

//DAA
DEFINE_INSTR(27)

//CPL
DEFINE_INSTR(2F)

//CP D
DEFINE_INSTR(BA)

//CP C
DEFINE_INSTR(B9)

//CP B
DEFINE_INSTR(B8)

//EI
DEFINE_INSTR(FB)

//JP Z, a16
DEFINE_INSTR(CA)

//HALT
DEFINE_INSTR(76)

//RLCA
DEFINE_INSTR(07)

//LD E, L
DEFINE_INSTR(5D)

//LD (HL), E
DEFINE_INSTR(73)

//LD E, (HL)
DEFINE_INSTR(5E)

//LD (a16), SP
DEFINE_INSTR(08)

//LD H, (HL)
DEFINE_INSTR(66)

//INC SP
DEFINE_INSTR(33)

//XOR L
DEFINE_INSTR(AD)

//OR B
DEFINE_INSTR(B0)

//DEC SP
DEFINE_INSTR(3B)

//ADD HL, SP
DEFINE_INSTR(39)

//ADD SP, r8
DEFINE_INSTR(E8)

//LD (HL), d8
DEFINE_INSTR(36)

//SBC A, d8
DEFINE_INSTR(DE)

//DEC BC
DEFINE_INSTR(0B)

//DEC DE
DEFINE_INSTR(1B)

//DEC HL
DEFINE_INSTR(2B)

//ADD HL, BC
DEFINE_INSTR(09)

//ADD HL, DE
DEFINE_INSTR(19)

//LD B, B
DEFINE_INSTR(40)

//LD B, C
DEFINE_INSTR(41)

//LD B, D
DEFINE_INSTR(42)

//LD B, E
DEFINE_INSTR(43)

//LD B, H
DEFINE_INSTR(44)

//LD B, L
DEFINE_INSTR(45)

//LD C, B
DEFINE_INSTR(48)

//LD C, C
DEFINE_INSTR(49)

//LD C, D
DEFINE_INSTR(4A)

//LD C, E
DEFINE_INSTR(4B)

//LD C, H
DEFINE_INSTR(4C)

//LD C, L
DEFINE_INSTR(4D)

//LD D, B
DEFINE_INSTR(50)

//LD D, C
DEFINE_INSTR(51)

//LD D, D
DEFINE_INSTR(52)

//LD D, E
DEFINE_INSTR(53)

//LD D, H
DEFINE_INSTR(54)

//LD D, L
DEFINE_INSTR(55)

//LD E, B
DEFINE_INSTR(58)

//LD E, C
DEFINE_INSTR(59)

//LD E, D
DEFINE_INSTR(5A)

//LD E, E
DEFINE_INSTR(5B)

//LD E, H
DEFINE_INSTR(5C)

//LD H, B
DEFINE_INSTR(60)

//LD H, C
DEFINE_INSTR(61)

//LD H, E
DEFINE_INSTR(63)

//LD H, H
DEFINE_INSTR(64)

//LD H, L
DEFINE_INSTR(65)

//LD L, B
DEFINE_INSTR(68)

//LD L, C
DEFINE_INSTR(69)

//LD L, D
DEFINE_INSTR(6A)

//LD L, H
DEFINE_INSTR(6C)

//LD L, L
DEFINE_INSTR(6D)

//LD (HL), H
DEFINE_INSTR(74)

//LD (HL), L
DEFINE_INSTR(75)

//LD A, A
DEFINE_INSTR(7F)

//JP NC, a16
DEFINE_INSTR(D2)

//JP C, a16
DEFINE_INSTR(DA)

//CALL Z, a16
DEFINE_INSTR(CC)

//CALL NC, a16
DEFINE_INSTR(D4)

//CALL C, a16
DEFINE_INSTR(DC)

//RETI
DEFINE_INSTR(D9)

//RST 00h
DEFINE_INSTR(C7)

//RST 10h
DEFINE_INSTR(D7)

//RST 20h
DEFINE_INSTR(E7)

//RST 30h
DEFINE_INSTR(F7)

//RST 08h
DEFINE_INSTR(CF)

//RST 18h
DEFINE_INSTR(DF)

//RST 28h
DEFINE_INSTR(EF)

//RST 38h
DEFINE_INSTR(FF)

//LD A, (C)
DEFINE_INSTR(F2)

//SCF
DEFINE_INSTR(37)

//CCF
DEFINE_INSTR(3F)

//OR D
DEFINE_INSTR(B2)

//OR E
DEFINE_INSTR(B3)

//OR H
DEFINE_INSTR(B4)

//OR L
DEFINE_INSTR(B5)

//CP H
DEFINE_INSTR(BC)

//CP L
DEFINE_INSTR(BD)

//CP A
DEFINE_INSTR(BF)

//ADD A, B
DEFINE_INSTR(80)

//ADD A, D
DEFINE_INSTR(82)

//ADD A, E
DEFINE_INSTR(83)

//ADD A, H
DEFINE_INSTR(84)

//ADD A, L
DEFINE_INSTR(85)

//ADD A, A
DEFINE_INSTR(87)

//ADC A, B
DEFINE_INSTR(88)

//ADC A, C
DEFINE_INSTR(89)

//ADC A, D
DEFINE_INSTR(8A)

//ADC A, E
DEFINE_INSTR(8B)

//ADC A, H
DEFINE_INSTR(8C)

//ADC A, L
DEFINE_INSTR(8D)

//ADC A, A
DEFINE_INSTR(8F)

//SUB D
DEFINE_INSTR(92)

//SUB E
DEFINE_INSTR(93)

//SUB H
DEFINE_INSTR(94)

//SUB L
DEFINE_INSTR(95)

//SUB (HL)
DEFINE_INSTR(96)

//SUB A
DEFINE_INSTR(97)

//SBC B
DEFINE_INSTR(98)

//SBC C
DEFINE_INSTR(99)

//SBC D
DEFINE_INSTR(9A)

//SBC E
DEFINE_INSTR(9B)

//SBC H
DEFINE_INSTR(9C)

//SBC L
DEFINE_INSTR(9D)

//SBC (HL)
DEFINE_INSTR(9E)

//SBC A
DEFINE_INSTR(9F)

//AND B
DEFINE_INSTR(A0)

//AND C
DEFINE_INSTR(A1)

//AND D
DEFINE_INSTR(A2)

//AND E
DEFINE_INSTR(A3)

//AND H
DEFINE_INSTR(A4)

//AND L
DEFINE_INSTR(A5)

//AND (HL)
DEFINE_INSTR(A6)

//AND A
DEFINE_INSTR(A7)

//XOR B
DEFINE_INSTR(A8)

//XOR D
DEFINE_INSTR(AA)

//XOR E
DEFINE_INSTR(AB)

//XOR H
DEFINE_INSTR(AC)

//RRCA
DEFINE_INSTR(0F)

//LD A, (BC)
DEFINE_INSTR(0A)

//LD (BC), A
DEFINE_INSTR(02)

//LD A, (HL-)
DEFINE_INSTR(3A)

//ADC A, (HL)
DEFINE_INSTR(8E)

//INC (HL)
DEFINE_INSTR(34)

//DEC (HL)
DEFINE_INSTR(35)

//Fills the jump table for the CB instructions
void init_cb_instructions();